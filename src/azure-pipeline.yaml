pool:
  name: Azure Pipelines
variables:
  resourceGroup: 'LinkerD-demo'
  clusterName: 'k8s-linkerd-moimha'

steps:
- task: AzureCLI@2
  displayName: 'Create AKS Cluster'
  inputs:
    azureSubscription: 'Moim-AzureSubcription-POWER'
    scriptType: bash
    scriptPath: src/infrastructure/kubernetes.sh
  env:
    clientSecret: $(clientSecret)
    clientId: $(clientId)
    aadTenantId: $(aadTenantId)
    subscriptionId: $(subscriptionId)
    clusterName: $(clusterName)
    resourceGroup: $(resourceGroup)
    location: $(location)

- task: AzureCLI@2
  displayName: 'Kubernetes Set-Context'
  inputs:
    azureSubscription: 'Moim-AzureSubcription-POWER'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: 'az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName) --overwrite-existing'
  env:
    clientSecret: $(clientSecret)
    clientId: $(clientId)

- task: AzureCLI@2
  displayName: 'Install LinkerD CLI & Control Plane'
  inputs:
    azureSubscription: 'Moim-AzureSubcription-POWER'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     curl -sL https://run.linkerd.io/install | sh
     
     export PATH=$PATH:$HOME/.linkerd2/bin
     
     linkerd check --pre
     
     linkerd install | kubectl apply -f -
     
     linkerd check
  env:
    clientSecret: $(clientSecret)
    clientId: $(clientId)

- task: HelmInstaller@0
  displayName: 'Install Helm 3.0.0'
  inputs:
    helmVersion: 3.0.0

- bash: 'helm repo add stable https://kubernetes-charts.storage.googleapis.com/'
  displayName: 'Helm - Add Stable repository'

- bash: |
   # Use Helm to deploy an NGINX ingress controller
   helm install nginx-ingress stable/nginx-ingress \
       --namespace default \
       --set controller.replicaCount=2 \
       --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
       --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
  displayName: 'Helm - Add Ingress Controller'

- task: AzureCLI@2
  displayName: 'Expose linkerd dashboard'
  inputs:
    azureSubscription: 'Moim-AzureSubcription-POWER'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: ' kubectl apply -f .\dashboard.yml'
    workingDirectory: src/manifests
  env:
    clientSecret: $(clientSecret)
    clientId: $(clientId)

- task: AzureCLI@2
  displayName: 'Create DNS Records'
  inputs:
    azureSubscription: 'Moim-AzureSubcription-POWER'
    scriptType: bash
    scriptPath: src/dns.sh
  env:
    clientSecret: $(clientSecret)
    clientId: $(clientId)

